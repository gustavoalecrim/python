##Importar bibliotecas necessárias

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

%matplotlib inline


Exercício 1
Carregue o arquivo csv chamado 'Churn.csv' usando pandas e salve a base em uma variável chamada df. (dica: pd.read_csv('<nome_da_base.csv>')) Imprima as primeiras 10 linhas do dataframe e verifique se tudo foi carregado corretamente. (dica: df.head())

df = pd.read_csv('Churn.csv')
df.head()
Exercício 2:
Que coluna indica se o cliente deixou ou não a empresa? Quantos clientes existem na sua base de dados? (dica: len(?))

#coluna rótulo: 'churned'
# número de clientes:
len(df)
Exercício 3:
Use df.describe() para explorar cada coluna. Por que o count (total de valores) é diferente para cada coluna e diferente de 5000?

df.describe()
Exercício 4:
Preencha os valores faltantes com a média de todo a base! (dica: df.fillna(df.mean())) Verifique se o count agora está 5000 para todas as colunas.

df = df.fillna(df.mean())
df.describe()
Exercício 5:
Verifique o número de colunas da base de dados (dica: df.shape)

Separe a base de dados em atributos de entrada e rótulos. Associe os atributos a variável X e os rótulos a variável y.

Verifique as primeiras linhas das bases separadas.

df.shape
X = df.iloc[:,0:15]
y = df.iloc[:,16]
X.head()
y.head()
Exercício 6:
Separa a base de treino (70%) e teste (30%) e associe-as as variáveis X_train, X_test, y_train, y_test (dica: train_test_split(X,y, test_size=0.3))

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)
Exercício 7:
Crie um classificador KNN com 5 vizinhos. (hint: KNeighborsClassifier(n_neighbors=5))

knn = KNeighborsClassifier(n_neighbors=9)
Exercício 8:
Apresente a base de treino para ajustar o modelo. (hint: knn.fit(, ))

knn = knn.fit(X_train, y_train)
Exercício 9:
Use o modelo para fazer previsões na base de teste. Associe os resultados de previsão a variável y_pred

y_pred = knn.predict(X_test)
Exercício 10:
Determine quão acurado é o seu modelo. (dica: accuracy_score(, ))

 accuracy_score(y_test,y_pred)
Exercício 11 (Opcional)
Tente diferentes valores de k entre 1 e 10 e veja se consegue achar um resultado melhor.
